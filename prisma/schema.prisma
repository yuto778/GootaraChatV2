// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  avatar          String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  messages        Message[]
  reactions       Reaction[]
  readStatus      ReadStatus[]
  templateMessage TemplateMessage[]
  friendsAsUser   Friends[]         @relation("UserFriends")
  friendsAsFriend Friends[]         @relation("FriendUser")
}

model Friends {
  id       String   @id @default(uuid())
  userId   String
  friendId String
  request  Boolean?
  user     User     @relation("UserFriends", fields: [userId], references: [id])
  friend   User     @relation("FriendUser", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model ChatRoom {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id        String       @id @default(dbgenerated("uuid_generate_v4()"))
  content   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  roomId    String
  user      User         @relation(fields: [userId], references: [id])
  ChatRoom  ChatRoom     @relation(fields: [roomId], references: [id])
  readBy    ReadStatus[]
  reactions Reaction[]
}

model ReadStatus {
  id        String   @id @default(uuid())
  userId    String
  messageId String
  readAt    DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId])
}

model Reaction {
  id        String   @id @default(uuid())
  emoji     String
  userId    String
  messageId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId, emoji])
}

model TemplateMessage {
  id       String  @id @default(uuid())
  userId   String
  content  String
  category String?
  user     User    @relation(fields: [userId], references: [id])
}
